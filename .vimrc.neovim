"""""""""""""""""""""""""""""""""""""""
"
" Plugins
"
""""""""""""""""""""""""""""""""""""""""

call plug#begin()


" Find files
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jesseleite/vim-agriculture'

" Navigate directories
Plug 'preservim/nerdtree'
Plug 'PhilRunninger/nerdtree-visual-selection'
Plug 'Xuyuanp/nerdtree-git-plugin'


" Window, & Split Tab management
Plug 'tpope/vim-obsession'
Plug 'qpkorr/vim-bufkill'

" Auto pairs
Plug 'jiangmiao/auto-pairs'

" Comments
Plug 'tpope/vim-commentary'

" Git integrations
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'

" Language support
Plug 'sheerun/vim-polyglot'
Plug 'davidhalter/jedi-vim'

" Autocompletion
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-compe'

" Tagbar
Plug 'preservim/tagbar'

" Code folding
Plug 'tmhedberg/simpylfold'

" Indentaion level indicators
Plug 'yggdroot/indentline'

" Python virtualenv
Plug 'jmcantrell/vim-virtualenv'

" Make it pretty
Plug 'rebelot/kanagawa.nvim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'

call plug#end()

"""""""""""""""""""""""""""""""""""""""
"
" Plugin Configuration
"
""""""""""""""""""""""""""""""""""""""""

" fzf
let g:fzf_layout = { 'down': '~40%' }
let $FZF_DEFAULT_OPTS="--bind
            \ ctrl-y:preview-up
            \,ctrl-e:preview-down,
            \ctrl-b:preview-page-up
            \,ctrl-f:preview-page-down,
            \ctrl-u:preview-half-page-up
            \,ctrl-d:preview-half-page-down,
            \shift-up:preview-top
            \,shift-down:preview-bottom"

" Auto pairs
func! SetHtmldjangoAutoPairs()
    let b:AutoPairs = deepcopy(g:AutoPairs)
    let b:AutoPairs['%'] = '%'
endfunction
autocmd FileType htmldjango call SetHtmldjangoAutoPairs()

" NERDTree
let NERDTreeIgnore=['__pycache__']
let g:NERDTreeGitStatusShowIgnored = 1

" Gitgutter
set updatetime=100

" Airline
let g:airline_theme='onedark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#nvimlsp#enabled = 1

" tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoclose_netrw = 1
let g:tagbar_sort = 1
let g:tagbar_compact = 2
let g:tagbar_show_tag_count = 1
let g:tagbar_previewwin_pos = 1
let g:tagbar_autopreview = 1

" simpylfold
set nofoldenable

" lspconfig & compe
" Autoformat on save
autocmd BufWritePre * lua vim.lsp.buf.formatting_sync()

""""""""""""""""""""""""""""""""""""""""
"
" General
"
""""""""""""""""""""""""""""""""""""""""

" Colors
" TODO: apply to airline & konsole
colorscheme kanagawa

" Autoreload config on write
autocmd! bufwritepost .vimrc source ~/.config/nvim/init.vim
autocmd! bufwritepost .vimrc.plugless source ~/.config/nvim/init.vim
autocmd! bufwritepost .vimrc.neovim source ~/.config/nvim/init.vim

" Reload config
command Refresh source ~/.config/nvim/init.vim

" We will have lots of issues without this
filetype plugin indent on
syntax enable
set clipboard=unnamed,unnamedplus

" File settings
set noswapfile
set nobackup
set hidden
set autoread
set fileformats=unix,dos,mac
set encoding=utf-8

" Modelines
set modeline
set modelines=10

" Split navigation
set splitbelow
set splitright

" Numbers!
set number

" Tab config
set expandtab tabstop=4 softtabstop=4 shiftwidth=4
set relativenumber

" Backspace config
set backspace=indent,eol,start

" Line width ruler
set colorcolumn=90

" Cursorline
set cursorline

" Remember cursor position
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Highlight yanked text
augroup highlight_yank
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank{higroup="IncSearch", timeout=700}
augroup END

" Scroll offset
set scrolloff=3

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Split navigation
set splitbelow
set splitright

""""""""""""""""""""""""""""""""""""""""
"
" Keymaps
"
""""""""""""""""""""""""""""""""""""""""

" Follow this leader
let mapleader=','
let maplocalleader='\'

" Searching
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <leader>/ :noh<cr>

" File navigation <leader>f
nnoremap <leader>fw :w<CR>
nnoremap <leader>fq :q<CR>
nnoremap <leader>fQ :q!<CR>
nnoremap <leader>ft :NERDTreeToggle<CR>
nnoremap <leader>fo :NERDTreeFind<CR>

" Find files
noremap <leader>ff :Files<CR>
noremap <leader>fg :GFiles<CR>
noremap <leader>fc :GFiles?<CR>
noremap <leader>fh :History<CR>

" Serach <leader>s
noremap <leader>ss <Plug>RgRawSearch
noremap <leader>sw <Plug>RgRawWordUnderCursor
vnoremap <leader>sw <Plug>RgRawVisualSelection
noremap <leader>st :Tags<CR>
noremap <leader>sf :BLines<CR>
noremap <leader>sb :Lines<CR>

" Buffer navigation <leader>b
noremap ]b :bn<CR>
noremap [b :bp<CR>
noremap <leader>bb :Buffer<CR>
noremap <Leader>bc :BD<CR>

" Split navigation
noremap <leader>x :<C-u>split<CR>
noremap <leader>v :<C-u>vsplit<CR>
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Git <leader>g
noremap <leader>gg :Git<CR>
noremap <leader>gb :Git blame<CR>
noremap <leader>gd :Git diff<CR>
noremap <leader>gl :Git log<CR>
noremap <leader>gh :GBrowse!<CR>
vnoremap <leader>gh :'<,'>GBrowse!<CR>

" TODO: find a mapping for git commit searches
" noremap <leader>gg :Commits<CR>
" noremap <leader>gh :BCommits<CR>

" Hunks <leader>g
noremap ]h <Plug>(GitGutterNextHunk)
noremap [h <Plug>(GitGutterPrevHunk)
command! Gqf GitGutterQuickFix | copen
command! Gqfcf GitGutterQuickFixCurrentFile | copen
noremap <leader>hl :Gqfcf<CR>
noremap <leader>hL :Gqf<CR>
noremap <leader>hp :GitGutterPreviewHunk<CR>
noremap <leader>hs :GitGutterStageHunk<CR>
noremap <leader>hu :GitGutterUndoHunk<CR>

" Code navigation <leader>c
nnoremap <Leader>ct :TagbarToggle<CR>

" Quickfix list <leader>q
nnoremap ]q :cnext<CR>
nnoremap [q :cprev<CR>
nnoremap <leader>qq :copen<CR>
nnoremap <leader>qc :cclose<CR>

" Vim config <leader>v ?
noremap <leader>vv :Commands<CR>
noremap <leader>vm :Maps<CR>
noremap <leader>vh :Helptags<CR>
noremap <leader>vr :Refresh<CR>
noremap <leader>vi :PlugInstall<CR>
noremap <leader>vi :PlugInstall<CR>
noremap <leader>vu :PlugUpdate<CR>
noremap <leader>vc :PlugClean<CR>

" Maintain visual mode after shifting
vmap < <gv
vmap > >gv

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"""""""""""""""""""""""""""""""""""""""
"
" Testing
"
""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""
"
" Lua
"
""""""""""""""""""""""""""""""""""""""""

lua << EOF
-- Change diagnostic signs.
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "LspDiagnosticsSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end

-- lspconfig & compe
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
-- Error navigation
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[e', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']e', vim.diagnostic.goto_next, opts)
-- Code navigation <leader>c
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', '<leader>cc', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', '<leader>ck', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', '<leader>cu', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<leader>cr', vim.lsp.buf.rename, bufopts)
  --vim.keymap.set('n', '<leader>cc', vim.lsp.buf.declaration, bufopts)
  --vim.keymap.set('n', '<leader>ci', vim.lsp.buf.implementation, bufopts)
  --vim.keymap.set('n', '<leader>cq', vim.lsp.buf.signature_help, bufopts)
  --vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  --vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  --vim.keymap.set('n', '<space>wl', function()
    --print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  --end, bufopts)
  --vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  --vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', '<leader>cf', function() vim.lsp.buf.format { async = true } end, bufopts)

  -- Highlight references under cursor
  -- https://sbulav.github.io/til/til-neovim-highlight-references/
  -- https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#serverCapabilities
  if client.server_capabilities.documentHighlightProvider then
      vim.api.nvim_create_augroup("lsp_document_highlight", { clear = true })
      vim.api.nvim_clear_autocmds { buffer = bufnr, group = "lsp_document_highlight" }
      vim.api.nvim_create_autocmd("CursorHold", {
          callback = vim.lsp.buf.document_highlight,
          buffer = bufnr,
          group = "lsp_document_highlight",
          desc = "Document Highlight",
      })
      vim.api.nvim_create_autocmd("CursorMoved", {
          callback = vim.lsp.buf.clear_references,
          buffer = bufnr,
          group = "lsp_document_highlight",
          desc = "Clear All the References",
      })
  end
end

local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}

local lspconfig = require('lspconfig')
lspconfig.pylsp.setup{
    on_attach = on_attach,
    flags = lsp_flags,
    settings = {
        pylsp = {
            configurationSources = {'flake8'},
            plugins = {
                pycodestyle = {enabled = false},
                mccabe = {enabled = false},
                pyflakes = {enabled = false},
                flake8 = {enabled = true},
                pyls_isort = {enabled = true},
                python_lsp_black = {enabled = true},
                pyls_memestra = {enabled = true},
                pylint = {enable = true},
            }
        }
    }
}

local cmp = require('compe')
cmp.setup({
    enabled = true;
    autocomplete = true;
    debug = false;
    min_length = 1;
    preselect = 'enable';
    throttle_time = 80;
    source_timeout = 200;
    incomplete_delay = 400;
    max_abbr_width = 100;
    max_kind_width = 100;
    max_menu_width = 100;
    documentation = true;

    source = {
        path = true;
        buffer = true;
        calc = true;
        nvim_lsp = true;
        nvim_lua = true;
        vsnip = false;
        ultisnips = false;
    };
})

-- Gutter signs
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

EOF
